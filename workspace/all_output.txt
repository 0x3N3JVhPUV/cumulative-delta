src/index.ts
```typescript
import express from 'express';
import { ExchangeAPIFactory } from './factories/exchangeAPIFactory';

const app = express();
const port = 3000;

app.get('/exchange/:exchange/symbols', async (req, res) => {
  try {
    const exchangeAPI = ExchangeAPIFactory.createExchangeAPI(req.params.exchange);
    const symbols = await exchangeAPI.getSymbols();
    res.json(symbols);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

app.get('/exchange/:exchange/trade-history/:symbol', async (req, res) => {
  try {
    const exchangeAPI = ExchangeAPIFactory.createExchangeAPI(req.params.exchange);
    const tradeHistory = await exchangeAPI.getTradeHistory(req.params.symbol);
    res.json(tradeHistory);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

app.get('/exchange/:exchange/cumulative-delta/:symbol', async (req, res) => {
  try {
    const exchangeAPI = ExchangeAPIFactory.createExchangeAPI(req.params.exchange);
    const cumulativeDelta = await exchangeAPI.getCumulativeDelta(req.params.symbol);
    res.json({ cumulativeDelta });
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});
```

src/factories/exchangeAPIFactory.ts
```typescript
import { ExchangeAPI } from '../interfaces/exchangeAPI';
import { KucoinAPI } from '../exchanges/kucoinAPI';

export class ExchangeAPIFactory {
  static createExchangeAPI(exchange: string): ExchangeAPI {
    switch (exchange) {
      case 'kucoin':
        return new KucoinAPI();
      // Add cases for other exchanges as you integrate them
      default:
        throw new Error('Exchange not supported');
    }
  }
}
```

src/interfaces/exchangeAPI.ts
```typescript
export interface ExchangeAPI {
  getSymbols(): Promise<string[]>;
  getTradeHistory(symbol: string): Promise<TradeHistory[]>;
  getCumulativeDelta(symbol: string): Promise<number>;
}

export interface TradeHistory {
  price: number;
  volume: number;
  time: number;
  isBuyerMaker: boolean;
}
```

src/exchanges/kucoinAPI.ts
```typescript
import { ExchangeAPI, TradeHistory } from '../interfaces/exchangeAPI';
import { Kucoin } from 'kucoin-node-sdk';

export class KucoinAPI implements ExchangeAPI {
  private kucoin: Kucoin;

  constructor() {
    this.kucoin = new Kucoin();
  }

  async getSymbols(): Promise<string[]> {
    // Implement the method to fetch symbols from Kucoin API
  }

  async getTradeHistory(symbol: string): Promise<TradeHistory[]> {
    // Implement the method to fetch trade history from Kucoin API
  }

  async getCumulativeDelta(symbol: string): Promise<number> {
    // Implement the method to calculate cumulative delta from trade history
  }
}
```

package.json
```json
{
  "name": "cumulative-delta",
  "version": "1.0.0",
  "description": "A REST API to calculate the cumulative delta of a specific trading pair.",
  "main": "src/index.ts",
  "scripts": {
    "start": "ts-node src/index.ts"
  },
  "dependencies": {
    "express": "^4.17.1",
    "kucoin-node-sdk": "^1.0.0"
  },
  "devDependencies": {
    "@types/express": "^4.17.11",
    "@types/node": "^14.14.37",
    "ts-node": "^9.1.1",
    "typescript": "^4.2.4"
  }
}
```

tsconfig.json
```json
{
  "compilerOptions": {
    "target": "es6",
    "module": "commonjs",
    "outDir": "./dist",
    "strict": true,
    "esModuleInterop": true
  },
  "include": ["src/**/*", "kucoin-node-sdk.d.ts"]
}
```